package jcep.front.web;

import java.io.File;
import java.io.FileInputStream;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;

import javax.annotation.Resource;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import egovframework.rte.fdl.property.EgovPropertyService;
import egovframework.rte.ptl.mvc.tags.ui.pagination.PaginationInfo;
import jcep.admin.model.MemberVO;
import jcep.front.model.FacilityResourceFrontVO;
import jcep.front.service.FacilityResourceFrontService;

/**
 * @Class Name : FacilityResourceFrontController.java
 * @Description : FacilityResourceFrontController  Class
 * @Modification Information
 * @
 * @  수정일      수정자              수정내용
 * @ ---------   ---------   -------------------------------
 * @ 2019.07.03          최초생성
 * @version 1.0
 * @see
 *  Copyright (C) by MOPAS All right reserved.
 */

@Controller
public class FacilityResourceFrontController {

	@Resource(name = "facilityResourceFrontService")
	protected FacilityResourceFrontService facilityResourceFrontService;
	
	/** EgovPropertyService */
	@Resource(name = "propertiesService")
	protected EgovPropertyService propertiesService;
	

    // Calendar 인스턴스 생성
    Calendar cal = Calendar.getInstance();
   
    // 요일 표시 헤더
    private String[] calHeader = {"일","월","화","수","목","금","토"};
    // 날짜 데이터 배열
    private String[][] calDate = new String[6][7];

    private int width=calHeader.length; // 배열 가로 넓이
    private int startDay;   // 월 시작 요일
    private int lastDay;    // 월 마지막 날짜
    private int inputDate=1;  // 입력 날짜

	
	/**
	 * 시설정보 목록을 조회한다. (pageing)
	 * @param searchVO - 조회할 정보가 담긴 FacilityResourceFrontVO
	 * @param model
	 * @return "facilityUseList"
	 * @exception Exception
	 */
	@RequestMapping(value = "/facilityUseList.do")
	public ModelAndView facilityUseList(@ModelAttribute("searchVO") FacilityResourceFrontVO searchVO, ModelAndView mv, Model model) throws Exception {
		
		searchVO.setPageUnit(propertiesService.getInt("pageUnit"));
		searchVO.setPageSize(propertiesService.getInt("pageSize"));

		PaginationInfo paginationInfo = new PaginationInfo();
		paginationInfo.setCurrentPageNo(searchVO.getPageIndex());
		paginationInfo.setRecordCountPerPage(searchVO.getPageUnit());
		paginationInfo.setPageSize(searchVO.getPageSize());

		searchVO.setFirstIndex(paginationInfo.getFirstRecordIndex());
		searchVO.setLastIndex(paginationInfo.getLastRecordIndex());
		searchVO.setRecordCountPerPage(paginationInfo.getRecordCountPerPage());
		
		Calendar cal = Calendar.getInstance();
		
		int year = cal.get(Calendar.YEAR);
		int mon = cal.get(Calendar.MONTH);
		int day = cal.get(Calendar.DATE);
		
		startDay = cal.get(Calendar.DAY_OF_WEEK); // 월 시작 요일
        lastDay = cal.getActualMaximum(Calendar.DATE); // 월 마지막 날짜
       
        // 2차 배열에 날짜 입력
        int row = 0;
        for(int i=1; inputDate<=lastDay; i++){
           
            // 시작 요일이 오기전에는 공백 대입
            if(i<startDay) calDate[row][i-1]="";
            else{
                // 날짜 배열에 입력
                calDate[row][(i-1)%width]=Integer.toString(inputDate);
                inputDate++;
               
                // 가로 마지막 열에 오면 행 바꿈
                if(i%width==0) row++;
            }      
        }


		System.out.println("year :: " + year);
		System.out.println("mon :: " + mon);
		System.out.println("day :: " + day);
		System.out.println("startDay :: " + startDay);
		System.out.println("lastDay :: " + lastDay);

		ArrayList<FacilityResourceFrontVO> facilityUseList = facilityResourceFrontService.selectFacilityUseList(searchVO);
		model.addAttribute("resultList", facilityUseList);
		model.addAttribute("year", year);
		model.addAttribute("mon", mon);
		model.addAttribute("day", day);
		model.addAttribute("startDay", startDay);
		model.addAttribute("lastDay", lastDay);
		
		
		int totCnt = facilityResourceFrontService.selectFacilityUseListTotCnt(searchVO);
		paginationInfo.setTotalRecordCount(totCnt);
		model.addAttribute("paginationInfo", paginationInfo);
		
		mv.setViewName("/view/frontView/facilityUseList");
		
		return mv;
	}
	
	/**
	 * 자원 사용 목록을 조회한다. (pageing)
	 * @param searchVO - 조회할 정보가 담긴 MemberVO
	 * @param model
	 * @return "resourceUseList"
	 * @exception Exception
	 */
	@RequestMapping(value = "/resourceUseList.do")
	public ModelAndView resourceUseList(@ModelAttribute("searchVO") FacilityResourceFrontVO searchVO, ModelAndView mv, Model model) throws Exception {
		System.out.println("searchVO_1***********************"+searchVO);
		searchVO.setPageUnit(propertiesService.getInt("pageUnit"));
		searchVO.setPageSize(propertiesService.getInt("pageSize"));

		PaginationInfo paginationInfo = new PaginationInfo();
		paginationInfo.setCurrentPageNo(searchVO.getPageIndex());
		paginationInfo.setRecordCountPerPage(searchVO.getPageUnit());
		paginationInfo.setPageSize(searchVO.getPageSize());

		searchVO.setFirstIndex(paginationInfo.getFirstRecordIndex());
		searchVO.setLastIndex(paginationInfo.getLastRecordIndex());
		searchVO.setRecordCountPerPage(paginationInfo.getRecordCountPerPage());

		ArrayList<FacilityResourceFrontVO> resourceUseList = facilityResourceFrontService.selectResourceUseList(searchVO);
		model.addAttribute("resultList", resourceUseList);
		
		int totCnt = facilityResourceFrontService.selectResourceUseListTotCnt(searchVO);
		paginationInfo.setTotalRecordCount(totCnt);
		model.addAttribute("paginationInfo", paginationInfo);
		
		mv.setViewName("/view/frontView/resourceUseList");
		
		return mv;
	}
	
	/**
	 * 시설관리 지침을 다운로드 한다.
	 * @param model
	 * @return "download"
	 * @exception Exception
	 */
	@RequestMapping(value = "/download.do")
	public ModelAndView download(ModelAndView mv, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		response.setContentType("application/octet-stream");
	    response.setHeader("Content-Disposition","attachment;filename=facility.hwp");

	    //File file = new File("F:\\eGovFrameDev-3.8.0-64bit\\workspace\\JCEP_SYSTEM\\src\\main\\webapp\\down\\facility.hwp");
	    File file = new File("/root/apache-tomcat-9.0.10/webapps/JCEP_SYSTEM/down/facility.hwp");
	    
	    FileInputStream fileIn = new FileInputStream(file);
	    ServletOutputStream out = response.getOutputStream();
	     
	    byte[] outputByte = new byte[4096];
	    
	    while(fileIn.read(outputByte, 0, 4096) != -1)
	    {
	    	out.write(outputByte, 0, 4096);
	    }
	    
	    fileIn.close();
	    out.flush();
	    out.close();

		return mv;
	}
	
	/**
	 * 온라인 지원 정보를 신청한다.
	 * @param searchVO - 조회할 정보가 담긴 MemberVO
	 * @param model
	 * @return "joinStep03"
	 * @exception Exception
	 */
	@RequestMapping(value = "/onlineInsert.do")
	public String onlineInsert(HttpServletRequest request, Model model, @ModelAttribute("searchVO") MemberVO searchVO) throws Exception {
		System.out.println("onlineInsert_1***********************"+searchVO);
		
		String memberId = request.getParameter("memberId");
		searchVO.setMemberId(memberId);

		System.out.println("memberId :: " + memberId);

		Integer returnCode = facilityResourceFrontService.onlineInsert(searchVO);
		
		System.out.println("onlineInsert_2***********************"+searchVO);
		
		return "jsonView";
	}

}



